window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":12,"numPassedTests":85,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":12,"numTotalTests":85,"startTime":1744440961592,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440970878,"runtime":1419,"slow":false,"start":1744440969459},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\me.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["GET /api/me"],"duration":29,"failureMessages":[],"fullName":"GET /api/me should return 401 if no token is provided","status":"passed","title":"should return 401 if no token is provided"},{"ancestorTitles":["GET /api/me"],"duration":5,"failureMessages":[],"fullName":"GET /api/me should return 404 if user is not found","status":"passed","title":"should return 404 if user is not found"},{"ancestorTitles":["GET /api/me"],"duration":5,"failureMessages":[],"fullName":"GET /api/me should return 200 with user data if user is found","status":"passed","title":"should return 200 with user data if user is found"},{"ancestorTitles":["GET /api/me"],"duration":4,"failureMessages":[],"fullName":"GET /api/me should return 401 if token verification fails","status":"passed","title":"should return 401 if token verification fails"}]},{"numFailingTests":0,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440970884,"runtime":1426,"slow":false,"start":1744440969458},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\data.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["GET /api/data"],"duration":29,"failureMessages":[],"fullName":"GET /api/data should return 401 if no token is provided","status":"passed","title":"should return 401 if no token is provided"},{"ancestorTitles":["GET /api/data"],"duration":4,"failureMessages":[],"fullName":"GET /api/data should return 403 if user is not found","status":"passed","title":"should return 403 if user is not found"},{"ancestorTitles":["GET /api/data"],"duration":5,"failureMessages":[],"fullName":"GET /api/data should return 403 if user is pending","status":"passed","title":"should return 403 if user is pending"},{"ancestorTitles":["GET /api/data"],"duration":6,"failureMessages":[],"fullName":"GET /api/data should return 200 with user data if user is valid","status":"passed","title":"should return 200 with user data if user is valid"},{"ancestorTitles":["GET /api/data"],"duration":5,"failureMessages":[],"fullName":"GET /api/data should return 403 if token verification fails","status":"passed","title":"should return 403 if token verification fails"}]},{"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971660,"runtime":2204,"slow":false,"start":1744440969456},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\initDevices.integration.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["POST /api/admin/init-devices"],"duration":42,"failureMessages":[],"fullName":"POST /api/admin/init-devices should initialize devices successfully","status":"passed","title":"should initialize devices successfully"}]},{"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971680,"runtime":2224,"slow":false,"start":1744440969456},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\clearInvalidDevices.integration.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["POST /api/admin/clear-invalid-devices"],"duration":43,"failureMessages":[],"fullName":"POST /api/admin/clear-invalid-devices should clear invalid devices and re-sync","status":"passed","title":"should clear invalid devices and re-sync"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971671,"runtime":2215,"slow":false,"start":1744440969456},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\initDevices.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["initDevices"],"duration":103,"failureMessages":[],"fullName":"initDevices should initialize devices from excel file","status":"passed","title":"should initialize devices from excel file"},{"ancestorTitles":["initDevices"],"duration":6,"failureMessages":[],"fullName":"initDevices should skip invalid devices from excel file and insert none","status":"passed","title":"should skip invalid devices from excel file and insert none"},{"ancestorTitles":["initDevices"],"duration":35,"failureMessages":[],"fullName":"initDevices should throw error if existing devices are invalid","status":"passed","title":"should throw error if existing devices are invalid"},{"ancestorTitles":["initDevices"],"duration":4,"failureMessages":[],"fullName":"initDevices should do nothing if no excel files exist","status":"passed","title":"should do nothing if no excel files exist"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971701,"runtime":2242,"slow":false,"start":1744440969459},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\clearInvalidDevices.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["POST /api/admin/clear-invalid-devices"],"duration":47,"failureMessages":[],"fullName":"POST /api/admin/clear-invalid-devices should clear invalid devices and re-sync","status":"passed","title":"should clear invalid devices and re-sync"},{"ancestorTitles":["POST /api/admin/clear-invalid-devices"],"duration":8,"failureMessages":[],"fullName":"POST /api/admin/clear-invalid-devices should return 401 if no token provided","status":"passed","title":"should return 401 if no token provided"},{"ancestorTitles":["POST /api/admin/clear-invalid-devices"],"duration":7,"failureMessages":[],"fullName":"POST /api/admin/clear-invalid-devices should return 403 if user is not admin","status":"passed","title":"should return 403 if user is not admin"},{"ancestorTitles":["POST /api/admin/clear-invalid-devices"],"duration":4,"failureMessages":[],"fullName":"POST /api/admin/clear-invalid-devices should return 500 if server error occurs","status":"passed","title":"should return 500 if server error occurs"}]},{"numFailingTests":0,"numPassingTests":3,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971765,"runtime":2306,"slow":false,"start":1744440969459},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\exportRetentionData.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["exportRetentionData"],"duration":144,"failureMessages":[],"fullName":"exportRetentionData should export and delete retention data older than 2 years","status":"passed","title":"should export and delete retention data older than 2 years"},{"ancestorTitles":["exportRetentionData"],"duration":12,"failureMessages":[],"fullName":"exportRetentionData should do nothing if no retention data exists","status":"passed","title":"should do nothing if no retention data exists"},{"ancestorTitles":["exportRetentionData"],"duration":101,"failureMessages":[],"fullName":"exportRetentionData should throw error if file write fails","status":"passed","title":"should throw error if file write fails"}]},{"numFailingTests":0,"numPassingTests":11,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971783,"runtime":2324,"slow":false,"start":1744440969459},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\endpoints.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["server endpoints"],"duration":35,"failureMessages":[],"fullName":"server endpoints should return user data for GET /api/data with valid token","status":"passed","title":"should return user data for GET /api/data with valid token"},{"ancestorTitles":["server endpoints"],"duration":9,"failureMessages":[],"fullName":"server endpoints should return 401 for GET /api/data without token","status":"passed","title":"should return 401 for GET /api/data without token"},{"ancestorTitles":["server endpoints"],"duration":6,"failureMessages":[],"fullName":"server endpoints should return 403 for GET /api/data if user is pending","status":"passed","title":"should return 403 for GET /api/data if user is pending"},{"ancestorTitles":["server endpoints"],"duration":9,"failureMessages":[],"fullName":"server endpoints should return user info for GET /api/me with valid token","status":"passed","title":"should return user info for GET /api/me with valid token"},{"ancestorTitles":["server endpoints"],"duration":5,"failureMessages":[],"fullName":"server endpoints should return 401 for GET /api/me without token","status":"passed","title":"should return 401 for GET /api/me without token"},{"ancestorTitles":["server endpoints"],"duration":19,"failureMessages":[],"fullName":"server endpoints should initialize devices via POST /api/admin/init-devices","status":"passed","title":"should initialize devices via POST /api/admin/init-devices"},{"ancestorTitles":["server endpoints"],"duration":5,"failureMessages":[],"fullName":"server endpoints should return 401 for POST /api/admin/init-devices without token","status":"passed","title":"should return 401 for POST /api/admin/init-devices without token"},{"ancestorTitles":["server endpoints"],"duration":9,"failureMessages":[],"fullName":"server endpoints should clear invalid devices and re-sync via POST /api/admin/clear-invalid-devices","status":"passed","title":"should clear invalid devices and re-sync via POST /api/admin/clear-invalid-devices"},{"ancestorTitles":["server endpoints"],"duration":5,"failureMessages":[],"fullName":"server endpoints should return 401 for POST /api/admin/clear-invalid-devices without token","status":"passed","title":"should return 401 for POST /api/admin/clear-invalid-devices without token"},{"ancestorTitles":["server endpoints"],"duration":7,"failureMessages":[],"fullName":"server endpoints should return 200 with no issues for GET /api/admin/verify-data-integrity if data is valid","status":"passed","title":"should return 200 with no issues for GET /api/admin/verify-data-integrity if data is valid"},{"ancestorTitles":["server endpoints"],"duration":5,"failureMessages":[],"fullName":"server endpoints should return 200 with issues for GET /api/admin/verify-data-integrity if data is invalid","status":"passed","title":"should return 200 with issues for GET /api/admin/verify-data-integrity if data is invalid"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440971790,"runtime":2334,"slow":false,"start":1744440969456},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\server\\verifyDataIntegrity.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["GET /api/admin/verify-data-integrity"],"duration":29,"failureMessages":[],"fullName":"GET /api/admin/verify-data-integrity should return 200 with no issues if data is valid","status":"passed","title":"should return 200 with no issues if data is valid"},{"ancestorTitles":["GET /api/admin/verify-data-integrity"],"duration":6,"failureMessages":[],"fullName":"GET /api/admin/verify-data-integrity should return 200 with issues if data is invalid","status":"passed","title":"should return 200 with issues if data is invalid"},{"ancestorTitles":["GET /api/admin/verify-data-integrity"],"duration":4,"failureMessages":[],"fullName":"GET /api/admin/verify-data-integrity should return 401 if no token is provided","status":"passed","title":"should return 401 if no token is provided"},{"ancestorTitles":["GET /api/admin/verify-data-integrity"],"duration":6,"failureMessages":[],"fullName":"GET /api/admin/verify-data-integrity should return 403 if user is not admin","status":"passed","title":"should return 403 if user is not admin"}]},{"numFailingTests":0,"numPassingTests":10,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440974273,"runtime":4815,"slow":false,"start":1744440969458},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\routes\\auth\\auth.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Auth API","POST /api/auth/register"],"duration":190,"failureMessages":[],"fullName":"Auth API POST /api/auth/register should register a new user","status":"passed","title":"should register a new user"},{"ancestorTitles":["Auth API","POST /api/auth/register"],"duration":56,"failureMessages":[],"fullName":"Auth API POST /api/auth/register should fail to register if user already exists","status":"passed","title":"should fail to register if user already exists"},{"ancestorTitles":["Auth API","POST /api/auth/login"],"duration":108,"failureMessages":[],"fullName":"Auth API POST /api/auth/login should login successfully with correct credentials","status":"passed","title":"should login successfully with correct credentials"},{"ancestorTitles":["Auth API","POST /api/auth/login"],"duration":115,"failureMessages":[],"fullName":"Auth API POST /api/auth/login should fail to login with incorrect password","status":"passed","title":"should fail to login with incorrect password"},{"ancestorTitles":["Auth API","POST /api/auth/login"],"duration":55,"failureMessages":[],"fullName":"Auth API POST /api/auth/login should fail to login if user does not exist","status":"passed","title":"should fail to login if user does not exist"},{"ancestorTitles":["Auth API","POST /api/auth/check-id"],"duration":56,"failureMessages":[],"fullName":"Auth API POST /api/auth/check-id should return available true if ID is not taken","status":"passed","title":"should return available true if ID is not taken"},{"ancestorTitles":["Auth API","POST /api/auth/check-id"],"duration":57,"failureMessages":[],"fullName":"Auth API POST /api/auth/check-id should return available false if ID is taken","status":"passed","title":"should return available false if ID is taken"},{"ancestorTitles":["Auth API","GET /api/auth/me"],"duration":66,"failureMessages":[],"fullName":"Auth API GET /api/auth/me should return user data with valid token","status":"passed","title":"should return user data with valid token"},{"ancestorTitles":["Auth API","GET /api/auth/me"],"duration":53,"failureMessages":[],"fullName":"Auth API GET /api/auth/me should fail if no token provided","status":"passed","title":"should fail if no token provided"},{"ancestorTitles":["Auth API","GET /api/auth/me"],"duration":57,"failureMessages":[],"fullName":"Auth API GET /api/auth/me should fail if user not found","status":"passed","title":"should fail if user not found"}]},{"numFailingTests":0,"numPassingTests":21,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440975816,"runtime":6360,"slow":true,"start":1744440969456},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\routes\\devices\\devices.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Devices API","GET /api/devices"],"duration":138,"failureMessages":[],"fullName":"Devices API GET /api/devices should return list of devices","status":"passed","title":"should return list of devices"},{"ancestorTitles":["Devices API","GET /api/devices"],"duration":110,"failureMessages":[],"fullName":"Devices API GET /api/devices should return 401 if no token provided","status":"passed","title":"should return 401 if no token provided"},{"ancestorTitles":["Devices API","GET /api/devices"],"duration":111,"failureMessages":[],"fullName":"Devices API GET /api/devices should return 401 if token is invalid","status":"passed","title":"should return 401 if token is invalid"},{"ancestorTitles":["Devices API","GET /api/devices"],"duration":123,"failureMessages":[],"fullName":"Devices API GET /api/devices should return 404 if no devices","status":"passed","title":"should return 404 if no devices"},{"ancestorTitles":["Devices API","GET /api/devices"],"duration":109,"failureMessages":[],"fullName":"Devices API GET /api/devices should handle database error","status":"passed","title":"should handle database error"},{"ancestorTitles":["Devices API","GET /api/devices/available"],"duration":116,"failureMessages":[],"fullName":"Devices API GET /api/devices/available should return list of available devices","status":"passed","title":"should return list of available devices"},{"ancestorTitles":["Devices API","GET /api/devices/available"],"duration":117,"failureMessages":[],"fullName":"Devices API GET /api/devices/available should return 404 if no available devices","status":"passed","title":"should return 404 if no available devices"},{"ancestorTitles":["Devices API","GET /api/devices/available"],"duration":113,"failureMessages":[],"fullName":"Devices API GET /api/devices/available should return 404 if devices are inactive","status":"passed","title":"should return 404 if devices are inactive"},{"ancestorTitles":["Devices API","GET /api/devices/available"],"duration":107,"failureMessages":[],"fullName":"Devices API GET /api/devices/available should return 500 if token is expired","status":"passed","title":"should return 500 if token is expired"},{"ancestorTitles":["Devices API","POST /api/devices/rent-device"],"duration":132,"failureMessages":[],"fullName":"Devices API POST /api/devices/rent-device should rent a device successfully","status":"passed","title":"should rent a device successfully"},{"ancestorTitles":["Devices API","POST /api/devices/rent-device"],"duration":113,"failureMessages":[],"fullName":"Devices API POST /api/devices/rent-device should fail if device already rented","status":"passed","title":"should fail if device already rented"},{"ancestorTitles":["Devices API","POST /api/devices/rent-device"],"duration":114,"failureMessages":[],"fullName":"Devices API POST /api/devices/rent-device should fail if device not active","status":"passed","title":"should fail if device not active"},{"ancestorTitles":["Devices API","POST /api/devices/rent-device"],"duration":108,"failureMessages":[],"fullName":"Devices API POST /api/devices/rent-device should fail if deviceId is invalid","status":"passed","title":"should fail if deviceId is invalid"},{"ancestorTitles":["Devices API","POST /api/devices/rent-device"],"duration":109,"failureMessages":[],"fullName":"Devices API POST /api/devices/rent-device should handle Device database save error","status":"passed","title":"should handle Device database save error"},{"ancestorTitles":["Devices API","POST /api/devices/rent-device"],"duration":112,"failureMessages":[],"fullName":"Devices API POST /api/devices/rent-device should handle RentalHistory database save error","status":"passed","title":"should handle RentalHistory database save error"},{"ancestorTitles":["Devices API","POST /api/devices/return-device"],"duration":157,"failureMessages":[],"fullName":"Devices API POST /api/devices/return-device should return a device successfully","status":"passed","title":"should return a device successfully"},{"ancestorTitles":["Devices API","POST /api/devices/return-device"],"duration":113,"failureMessages":[],"fullName":"Devices API POST /api/devices/return-device should fail if device not rented","status":"passed","title":"should fail if device not rented"},{"ancestorTitles":["Devices API","POST /api/devices/return-device"],"duration":116,"failureMessages":[],"fullName":"Devices API POST /api/devices/return-device should fail if user is not the renter","status":"passed","title":"should fail if user is not the renter"},{"ancestorTitles":["Devices API","POST /api/devices/return-device"],"duration":111,"failureMessages":[],"fullName":"Devices API POST /api/devices/return-device should fail if device does not exist","status":"passed","title":"should fail if device does not exist"},{"ancestorTitles":["Devices API","POST /api/devices/return-device"],"duration":134,"failureMessages":[],"fullName":"Devices API POST /api/devices/return-device should handle Device database error","status":"passed","title":"should handle Device database error"},{"ancestorTitles":["Devices API","POST /api/devices/return-device"],"duration":120,"failureMessages":[],"fullName":"Devices API POST /api/devices/return-device should handle RentalHistory database error","status":"passed","title":"should handle RentalHistory database error"}]},{"numFailingTests":0,"numPassingTests":17,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1744440976746,"runtime":7287,"slow":true,"start":1744440969459},"testFilePath":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\routes\\admin\\users.test.js","failureMessage":null,"testResults":[{"ancestorTitles":["Admin Users API","GET /api/admin/users/pending"],"duration":232,"failureMessages":[],"fullName":"Admin Users API GET /api/admin/users/pending should fail if not admin","status":"passed","title":"should fail if not admin"},{"ancestorTitles":["Admin Users API","GET /api/admin/users/pending"],"duration":158,"failureMessages":[],"fullName":"Admin Users API GET /api/admin/users/pending should return pending users","status":"passed","title":"should return pending users"},{"ancestorTitles":["Admin Users API","GET /api/admin/users/pending"],"duration":152,"failureMessages":[],"fullName":"Admin Users API GET /api/admin/users/pending should return empty list if no pending users","status":"passed","title":"should return empty list if no pending users"},{"ancestorTitles":["Admin Users API","GET /api/admin/users"],"duration":148,"failureMessages":[],"fullName":"Admin Users API GET /api/admin/users should fail if not admin","status":"passed","title":"should fail if not admin"},{"ancestorTitles":["Admin Users API","GET /api/admin/users"],"duration":151,"failureMessages":[],"fullName":"Admin Users API GET /api/admin/users should return approved users","status":"passed","title":"should return approved users"},{"ancestorTitles":["Admin Users API","GET /api/admin/users"],"duration":197,"failureMessages":[],"fullName":"Admin Users API GET /api/admin/users should return empty list if no approved users","status":"passed","title":"should return empty list if no approved users"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/approve"],"duration":153,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/approve should fail if not admin","status":"passed","title":"should fail if not admin"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/approve"],"duration":147,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/approve should fail if user not found","status":"passed","title":"should fail if user not found"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/approve"],"duration":151,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/approve should approve a pending user","status":"passed","title":"should approve a pending user"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/reject"],"duration":146,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/reject should fail if not admin","status":"passed","title":"should fail if not admin"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/reject"],"duration":145,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/reject should fail if user not found","status":"passed","title":"should fail if user not found"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/reject"],"duration":150,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/reject should reject a user and save to DeletedUser","status":"passed","title":"should reject a user and save to DeletedUser"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/delete"],"duration":144,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/delete should fail if not admin","status":"passed","title":"should fail if not admin"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/delete"],"duration":146,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/delete should fail if user not found","status":"passed","title":"should fail if user not found"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/delete"],"duration":143,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/delete should fail if deleting own account","status":"passed","title":"should fail if deleting own account"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/delete"],"duration":192,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/delete should fail if deleting higher or equal role level","status":"passed","title":"should fail if deleting higher or equal role level"},{"ancestorTitles":["Admin Users API","POST /api/admin/users/delete"],"duration":148,"failureMessages":[],"fullName":"Admin Users API POST /api/admin/users/delete should delete a user and save to DeletedUser","status":"passed","title":"should delete a user and save to DeletedUser"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":true,"collectCoverageFrom":["routes/**/*.js","models/**/*.js","utils/**/*.js","server.js","!**/*.test.js","!**/*.integration.test.js"],"coverageDirectory":"C:\\Users\\62String\\DeviceRentalApi\\backend\\tests\\coverage","coverageProvider":"babel","coverageReporters":["text","lcov","html"],"coverageThreshold":{"global":{"statements":0,"branches":0,"functions":0,"lines":0}},"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":15,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["C:\\Users\\62String\\DeviceRentalApi\\backend\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"tests/html-report","filename":"report.html","expand":true,"pageTitle":"DeviceRentalApi Test Report","includeCoverage":true,"openReport":false}]],"rootDir":"C:\\Users\\62String\\DeviceRentalApi\\backend","runTestsByPath":false,"seed":-798782434,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"C:\\Users\\62String\\DeviceRentalApi\\backend\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false,"coverageLinkPath":"..\\coverage\\lcov-report\\index.html"},"endTime":1744440976783,"_reporterOptions":{"publicPath":"tests/html-report","filename":"report.html","expand":true,"pageTitle":"DeviceRentalApi Test Report","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false,"includeCoverage":true},"logInfoMapping":{},"attachInfos":{}})